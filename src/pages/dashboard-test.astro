---
import Layout from "@/layouts/Layout.astro";

export const prerender = false;
---

<Layout title="Test Dashboard - Generowanie Plan√≥w">
  <main class="container mx-auto py-8 px-4 min-h-screen">
    <header class="mb-8">
      <h1 class="text-3xl md:text-4xl font-bold mb-2">Test Generowania Plan√≥w Posi≈Çk√≥w</h1>
      <p class="text-muted-foreground text-lg">Prosta strona testowa do weryfikacji integracji z OpenRouter</p>
    </header>

    <div class="max-w-4xl mx-auto space-y-6">
      <!-- Test Controls -->
      <div class="bg-card rounded-lg border p-6">
        <h2 class="text-xl font-semibold mb-4">Panel Testowy</h2>

        <div class="space-y-4">
          <div class="flex gap-4">
            <button
              id="generate-btn"
              class="bg-primary text-primary-foreground hover:bg-primary/90 px-6 py-3 rounded-md font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              üé≤ Wygeneruj Plan Posi≈Çk√≥w
            </button>

            <button
              id="fetch-current-btn"
              class="bg-secondary text-secondary-foreground hover:bg-secondary/80 px-6 py-3 rounded-md font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              üìã Pobierz Aktualny Plan
            </button>

            <button
              id="fetch-preferences-btn"
              class="bg-accent text-accent-foreground hover:bg-accent/80 px-6 py-3 rounded-md font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              ‚öôÔ∏è Sprawd≈∫ Preferencje
            </button>
          </div>

          <div class="flex items-center gap-4">
            <label class="flex items-center gap-2">
              <input type="checkbox" id="regeneration-checkbox" class="w-4 h-4" />
              <span class="text-sm">Regeneracja (zamiast pierwszego planu)</span>
            </label>
          </div>
        </div>
      </div>

      <!-- Status Bar -->
      <div id="status-bar" class="bg-muted rounded-lg p-4 text-center hidden">
        <div class="flex items-center justify-center gap-2">
          <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
          <span id="status-text" class="text-sm font-medium">Przetwarzanie...</span>
        </div>
      </div>

      <!-- Output Section -->
      <div class="bg-card rounded-lg border p-6">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold">Wynik</h2>
          <button id="clear-btn" class="text-sm text-muted-foreground hover:text-foreground transition-colors">
            Wyczy≈õƒá
          </button>
        </div>

        <pre
          id="output"
          class="bg-muted p-4 rounded-md overflow-auto max-h-[600px] text-sm font-mono">Kliknij przycisk aby przetestowaƒá API...</pre>
      </div>

      <!-- Instructions -->
      <div class="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
        <h3 class="text-lg font-semibold mb-2 text-blue-900 dark:text-blue-100">üìù Instrukcja testowania</h3>
        <ol class="list-decimal list-inside space-y-2 text-sm text-blue-800 dark:text-blue-200">
          <li>Najpierw sprawd≈∫ czy masz preferencje (przycisk "Sprawd≈∫ Preferencje")</li>
          <li>
            Je≈õli nie masz preferencji, przejd≈∫ do <a href="/onboarding" class="underline font-medium">/onboarding</a> i
            wype≈Çnij formularz
          </li>
          <li>Po ustawieniu preferencji, wr√≥ƒá tutaj i kliknij "Wygeneruj Plan Posi≈Çk√≥w"</li>
          <li>Sprawd≈∫ wynik w sekcji poni≈ºej - powinien zawieraƒá 3 posi≈Çki (≈õniadanie, obiad, kolacja)</li>
          <li>U≈ºyj checkboxa "Regeneracja" je≈õli chcesz wygenerowaƒá nowy plan (gdy ju≈º masz jaki≈õ)</li>
        </ol>
      </div>
    </div>
  </main>

  <script>
    const generateBtn = document.getElementById("generate-btn") as HTMLButtonElement;
    const fetchCurrentBtn = document.getElementById("fetch-current-btn") as HTMLButtonElement;
    const fetchPreferencesBtn = document.getElementById("fetch-preferences-btn") as HTMLButtonElement;
    const clearBtn = document.getElementById("clear-btn") as HTMLButtonElement;
    const output = document.getElementById("output") as HTMLPreElement;
    const statusBar = document.getElementById("status-bar") as HTMLDivElement;
    const statusText = document.getElementById("status-text") as HTMLSpanElement;
    const regenerationCheckbox = document.getElementById("regeneration-checkbox") as HTMLInputElement;

    function showStatus(message: string) {
      statusBar.classList.remove("hidden");
      statusText.textContent = message;
    }

    function hideStatus() {
      statusBar.classList.add("hidden");
    }

    function displayOutput(data: any, title: string) {
      const timestamp = new Date().toLocaleTimeString("pl-PL");
      output.textContent = `=== ${title} ===\nCzas: ${timestamp}\n\n${JSON.stringify(data, null, 2)}`;
    }

    function displayError(error: any, context: string) {
      const timestamp = new Date().toLocaleTimeString("pl-PL");
      output.textContent = `‚ùå B≈ÅƒÑD - ${context}\nCzas: ${timestamp}\n\n${error.message || JSON.stringify(error, null, 2)}`;
    }

    function disableButtons(disabled: boolean) {
      generateBtn.disabled = disabled;
      fetchCurrentBtn.disabled = disabled;
      fetchPreferencesBtn.disabled = disabled;
    }

    // Generate Meal Plan
    generateBtn.onclick = async () => {
      showStatus("Generowanie planu posi≈Çk√≥w...");
      disableButtons(true);

      try {
        const regeneration = regenerationCheckbox.checked;

        const startTime = Date.now();
        const res = await fetch("/api/meal-plans", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ regeneration }),
        });

        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        const data = await res.json();

        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${data.message || data.error || "Unknown error"}`);
        }

        displayOutput(data, `‚úÖ Plan wygenerowany w ${duration}s`);
      } catch (err) {
        displayError(err, "Generowanie planu");
      } finally {
        hideStatus();
        disableButtons(false);
      }
    };

    // Fetch Current Plan
    fetchCurrentBtn.onclick = async () => {
      showStatus("Pobieranie aktualnego planu...");
      disableButtons(true);

      try {
        const res = await fetch("/api/meal-plans/current");
        const data = await res.json();

        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${data.message || data.error || "Unknown error"}`);
        }

        displayOutput(data, "‚úÖ Aktualny plan posi≈Çk√≥w");
      } catch (err) {
        displayError(err, "Pobieranie planu");
      } finally {
        hideStatus();
        disableButtons(false);
      }
    };

    // Fetch Preferences
    fetchPreferencesBtn.onclick = async () => {
      showStatus("Sprawdzanie preferencji...");
      disableButtons(true);

      try {
        const res = await fetch("/api/preferences");
        const data = await res.json();

        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${data.message || data.error || "Unknown error"}`);
        }

        displayOutput(data, "‚úÖ Preferencje u≈ºytkownika");
      } catch (err) {
        displayError(err, "Pobieranie preferencji");
      } finally {
        hideStatus();
        disableButtons(false);
      }
    };

    // Clear Output
    clearBtn.onclick = () => {
      output.textContent = "Kliknij przycisk aby przetestowaƒá API...";
    };

    // Keyboard shortcuts
    document.addEventListener("keydown", (e) => {
      if (e.ctrlKey || e.metaKey) {
        if (e.key === "g") {
          e.preventDefault();
          generateBtn.click();
        } else if (e.key === "k") {
          e.preventDefault();
          clearBtn.click();
        }
      }
    });
  </script>
</Layout>
